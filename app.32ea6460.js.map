{"version":3,"sources":["js/ValidationError.js","js/caesar13.js","js/app.js"],"names":["ValidationError","message","name","Error","caesar13","swapASCII","beginCode","currentCode","isInBetween","begin","number","end","text","length","trim","characters","cipherROT13","i","currentASCII","charCodeAt","push","String","fromCharCode","join","submitButton","document","querySelector","textInput","outputMessage","errorMessage","addEventListener","event","preventDefault","textContent","value","error","console","log"],"mappings":"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","file":"app.32ea6460.js","sourceRoot":"..","sourcesContent":["class ValidationError extends Error {\n  constructor(message) {\n    super(message);\n    this.name = 'Validation error';\n  }\n}\nexport default ValidationError;\n","import ValidationError from './ValidationError';\n\nconst swapASCII = (beginCode, currentCode) => {\n  return ((currentCode + 13 - beginCode) % 26) + beginCode;\n};\n\nconst isInBetween = (begin, number, end) => {\n  return number >= begin && number <= end;\n};\n\nconst caesar13 = text => {\n  if (typeof text !== 'string') {\n    throw new ValidationError('Input is not a string!');\n  }\n  if (text.length === 0 || !text.trim()) {\n    throw new ValidationError('Input is empty!');\n  }\n  const characters = [...text];\n  const cipherROT13 = [];\n  const BEGIN_UPPERCASE = 65;\n  const BEGIN_LOWERCASE = 97;\n  const END_UPPERCASE = 90;\n  const END_LOWERCASE = 122;\n\n  for (let i = 0; i < characters.length; i++) {\n    const currentASCII = characters[i].charCodeAt(0);\n\n    if (isInBetween(BEGIN_UPPERCASE, currentASCII, END_UPPERCASE)) {\n      cipherROT13.push(String.fromCharCode(swapASCII(BEGIN_UPPERCASE, currentASCII)));\n    } else if (isInBetween(BEGIN_LOWERCASE, currentASCII, END_LOWERCASE)) {\n      cipherROT13.push(String.fromCharCode(swapASCII(BEGIN_LOWERCASE, currentASCII)));\n    } else {\n      cipherROT13.push(String.fromCharCode(currentASCII));\n    }\n  }\n\n  return cipherROT13.join('');\n};\n\nexport default caesar13;\n","import caesar13 from './caesar13';\n\nconst submitButton = document.querySelector('.cryptography-form__submit');\nconst textInput = document.querySelector('.cryptography-form__input');\nconst outputMessage = document.querySelector('.cryptography-output__encrypted-message');\nconst errorMessage = document.querySelector('.cryptography-output__error-message');\n\nsubmitButton.addEventListener('click', event => {\n  event.preventDefault();\n  outputMessage.textContent = '';\n  errorMessage.textContent = '';\n\n  try {\n    outputMessage.textContent = caesar13(textInput.value);\n    textInput.value = '';\n  } catch (error) {\n    console.log(`${error.name}: ${error.message}`);\n    if (error.name === 'Validation error') {\n      errorMessage.textContent = 'Caesar is dissatisfied with your actions';\n    }\n  }\n});\n"]}